// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysSocialConfigFieldNames          = builder.RawFieldNames(&SysSocialConfig{}, true)
	sysSocialConfigRows                = strings.Join(sysSocialConfigFieldNames, ",")
	sysSocialConfigRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(sysSocialConfigFieldNames, "id", "create_time"))

	cachePublicSysSocialConfigIdPrefix = "cache:public:sysSocialConfig:id:"
)

type (
	sysSocialConfigModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *SysSocialConfig) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysSocialConfig, error)
		Update(ctx context.Context, session sqlx.Session, data *SysSocialConfig) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultSysSocialConfigModel struct {
		sqlc.CachedConn
		table string
	}

	SysSocialConfig struct {
		Id               int64     `db:"id"`
		ClientId         string    `db:"client_id"`          // 应用ID
		ClientSecret     string    `db:"client_secret"`      // 应用密钥
		RedirectUri      string    `db:"redirect_uri"`       // 认证成功后跳转的地址
		PlatformName     string    `db:"platform_name"`      // 应用名
		Platform         string    `db:"platform"`           // 第三方平台
		Logo             string    `db:"logo"`               // 应用 LOGO
		AlipayPublicKey  string    `db:"alipay_public_key"`  // 支付宝公钥
		UnionId          string    `db:"union_id"`           // 是否需要申请unionid
		StackOverflowKey string    `db:"stack_overflow_key"` // Stack Overflow Key
		AgentId          string    `db:"agent_id"`           // 授权方的网页应用ID
		Scope            string    `db:"scope"`              // 授权范围
		Available        string    `db:"available"`          // 当前配置是否可用
		CreateTime       time.Time `db:"create_time"`        // 记录创建时间
		UpdateTime       time.Time `db:"update_time"`        // 记录更新时间
	}
)

func newSysSocialConfigModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysSocialConfigModel {
	return &defaultSysSocialConfigModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."sys_social_config"`,
	}
}

func (m *defaultSysSocialConfigModel) Insert(ctx context.Context, session sqlx.Session, data *SysSocialConfig) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(sysSocialConfigRows).Values(data.Id, data.ClientId, data.ClientSecret, data.RedirectUri, data.PlatformName, data.Platform, data.Logo, data.AlipayPublicKey, data.UnionId, data.StackOverflowKey, data.AgentId, data.Scope, data.Available, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicSysSocialConfigIdKey := fmt.Sprintf("%s%v", cachePublicSysSocialConfigIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicSysSocialConfigIdKey)
	return ret, err
}

func (m *defaultSysSocialConfigModel) FindOne(ctx context.Context, id int64) (*SysSocialConfig, error) {
	publicSysSocialConfigIdKey := fmt.Sprintf("%s%v", cachePublicSysSocialConfigIdPrefix, id)
	var resp SysSocialConfig
	err := m.QueryRowCtx(ctx, &resp, publicSysSocialConfigIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", sysSocialConfigRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysSocialConfigModel) Update(ctx context.Context, session sqlx.Session, data *SysSocialConfig) error {
	publicSysSocialConfigIdKey := fmt.Sprintf("%s%v", cachePublicSysSocialConfigIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, sysSocialConfigRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.ClientId, data.ClientSecret, data.RedirectUri, data.PlatformName, data.Platform, data.Logo, data.AlipayPublicKey, data.UnionId, data.StackOverflowKey, data.AgentId, data.Scope, data.Available, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.ClientId, data.ClientSecret, data.RedirectUri, data.PlatformName, data.Platform, data.Logo, data.AlipayPublicKey, data.UnionId, data.StackOverflowKey, data.AgentId, data.Scope, data.Available, time.Now())
	}, publicSysSocialConfigIdKey)
	return err
}

func (m *defaultSysSocialConfigModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicSysSocialConfigIdKey := fmt.Sprintf("%s%v", cachePublicSysSocialConfigIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicSysSocialConfigIdKey)
	return err
}

func (m *defaultSysSocialConfigModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicSysSocialConfigIdPrefix, primary)
}

func (m *defaultSysSocialConfigModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", sysSocialConfigRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysSocialConfigModel) tableName() string {
	return m.table
}
