// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	categoryFieldNames          = builder.RawFieldNames(&Category{}, true)
	categoryRows                = strings.Join(categoryFieldNames, ",")
	categoryRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(categoryFieldNames, "id", "create_time"))

	cachePublicCategoryIdPrefix = "cache:public:category:id:"
)

type (
	categoryModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *Category) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*Category, error)
		Update(ctx context.Context, session sqlx.Session, data *Category) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultCategoryModel struct {
		sqlc.CachedConn
		table string
	}

	Category struct {
		Id          int64     `db:"id"`          // 分类id
		Name        string    `db:"name"`        // 分类名称
		AliasName   string    `db:"alias_name"`  // 分类别名
		Description string    `db:"description"` // 分类描述
		ParentId    int64     `db:"parent_id"`   // 父分类id
		CreateTime  time.Time `db:"create_time"` // 创建时间
		UpdateTime  time.Time `db:"update_time"` // 修改时间
	}
)

func newCategoryModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultCategoryModel {
	return &defaultCategoryModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."category"`,
	}
}

func (m *defaultCategoryModel) Insert(ctx context.Context, session sqlx.Session, data *Category) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(categoryRows).Values(data.Id, data.Name, data.AliasName, data.Description, data.ParentId, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicCategoryIdKey := fmt.Sprintf("%s%v", cachePublicCategoryIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicCategoryIdKey)
	return ret, err
}

func (m *defaultCategoryModel) FindOne(ctx context.Context, id int64) (*Category, error) {
	publicCategoryIdKey := fmt.Sprintf("%s%v", cachePublicCategoryIdPrefix, id)
	var resp Category
	err := m.QueryRowCtx(ctx, &resp, publicCategoryIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", categoryRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultCategoryModel) Update(ctx context.Context, session sqlx.Session, data *Category) error {
	publicCategoryIdKey := fmt.Sprintf("%s%v", cachePublicCategoryIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, categoryRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Name, data.AliasName, data.Description, data.ParentId, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.AliasName, data.Description, data.ParentId, time.Now())
	}, publicCategoryIdKey)
	return err
}

func (m *defaultCategoryModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicCategoryIdKey := fmt.Sprintf("%s%v", cachePublicCategoryIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicCategoryIdKey)
	return err
}

func (m *defaultCategoryModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicCategoryIdPrefix, primary)
}

func (m *defaultCategoryModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", categoryRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultCategoryModel) tableName() string {
	return m.table
}
