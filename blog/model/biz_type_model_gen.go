// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bizTypeFieldNames          = builder.RawFieldNames(&BizType{}, true)
	bizTypeRows                = strings.Join(bizTypeFieldNames, ",")
	bizTypeRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(bizTypeFieldNames, "id", "create_time"))

	cachePublicBizTypeIdPrefix = "cache:public:bizType:id:"
)

type (
	bizTypeModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *BizType) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BizType, error)
		Update(ctx context.Context, session sqlx.Session, data *BizType) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultBizTypeModel struct {
		sqlc.CachedConn
		table string
	}

	BizType struct {
		Id          int64        `db:"id"`
		Pid         int64        `db:"pid"`
		Name        string       `db:"name"`        // 文章类型名
		Description string       `db:"description"` // 类型介绍
		Sort        int64        `db:"sort"`        // 排序
		Icon        string       `db:"icon"`        // 图标
		Position    string       `db:"position"`    // 分类在web端显示的位置，可选：nav、scrollmenu
		Available   int64        `db:"available"`   // 是否可用
		CreateTime  time.Time    `db:"create_time"` // 添加时间
		UpdateTime  sql.NullTime `db:"update_time"` // 更新时间
	}
)

func newBizTypeModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBizTypeModel {
	return &defaultBizTypeModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."biz_type"`,
	}
}

func (m *defaultBizTypeModel) Insert(ctx context.Context, session sqlx.Session, data *BizType) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(bizTypeRows).Values(data.Id, data.Pid, data.Name, data.Description, data.Sort, data.Icon, data.Position, data.Available, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicBizTypeIdKey := fmt.Sprintf("%s%v", cachePublicBizTypeIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizTypeIdKey)
	return ret, err
}

func (m *defaultBizTypeModel) FindOne(ctx context.Context, id int64) (*BizType, error) {
	publicBizTypeIdKey := fmt.Sprintf("%s%v", cachePublicBizTypeIdPrefix, id)
	var resp BizType
	err := m.QueryRowCtx(ctx, &resp, publicBizTypeIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizTypeRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBizTypeModel) Update(ctx context.Context, session sqlx.Session, data *BizType) error {
	publicBizTypeIdKey := fmt.Sprintf("%s%v", cachePublicBizTypeIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, bizTypeRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Pid, data.Name, data.Description, data.Sort, data.Icon, data.Position, data.Available, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.Pid, data.Name, data.Description, data.Sort, data.Icon, data.Position, data.Available, time.Now())
	}, publicBizTypeIdKey)
	return err
}

func (m *defaultBizTypeModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicBizTypeIdKey := fmt.Sprintf("%s%v", cachePublicBizTypeIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizTypeIdKey)
	return err
}

func (m *defaultBizTypeModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicBizTypeIdPrefix, primary)
}

func (m *defaultBizTypeModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizTypeRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBizTypeModel) tableName() string {
	return m.table
}
