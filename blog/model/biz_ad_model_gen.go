// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bizAdFieldNames          = builder.RawFieldNames(&BizAd{}, true)
	bizAdRows                = strings.Join(bizAdFieldNames, ",")
	bizAdRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(bizAdFieldNames, "id", "create_time"))

	cachePublicBizAdIdPrefix = "cache:public:bizAd:id:"
)

type (
	bizAdModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *BizAd) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BizAd, error)
		Update(ctx context.Context, session sqlx.Session, data *BizAd) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultBizAdModel struct {
		sqlc.CachedConn
		table string
	}

	BizAd struct {
		Id           int64     `db:"id"`
		Tp           string    `db:"tp"`            // 广告类型
		Position     string    `db:"position"`      // 广告位置
		Title        string    `db:"title"`         // 广告标题
		Content      string    `db:"content"`       // 广告内容
		Picture      string    `db:"picture"`       // 广告图片
		Link         string    `db:"link"`          // 广告链接
		ExpiringDate time.Time `db:"expiring_date"` // 广告到期日
		ShowNumber   int64     `db:"show_number"`   // 展示次数
		ClickNumber  int64     `db:"click_number"`  // 点击次数
		CreateTime   time.Time `db:"create_time"`   // 添加时间
		UpdateTime   time.Time `db:"update_time"`   // 更新时间
	}
)

func newBizAdModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBizAdModel {
	return &defaultBizAdModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."biz_ad"`,
	}
}

func (m *defaultBizAdModel) Insert(ctx context.Context, session sqlx.Session, data *BizAd) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(bizAdRows).Values(data.Id, data.Tp, data.Position, data.Title, data.Content, data.Picture, data.Link, data.ExpiringDate, data.ShowNumber, data.ClickNumber, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicBizAdIdKey := fmt.Sprintf("%s%v", cachePublicBizAdIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizAdIdKey)
	return ret, err
}

func (m *defaultBizAdModel) FindOne(ctx context.Context, id int64) (*BizAd, error) {
	publicBizAdIdKey := fmt.Sprintf("%s%v", cachePublicBizAdIdPrefix, id)
	var resp BizAd
	err := m.QueryRowCtx(ctx, &resp, publicBizAdIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizAdRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBizAdModel) Update(ctx context.Context, session sqlx.Session, data *BizAd) error {
	publicBizAdIdKey := fmt.Sprintf("%s%v", cachePublicBizAdIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, bizAdRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Tp, data.Position, data.Title, data.Content, data.Picture, data.Link, data.ExpiringDate, data.ShowNumber, data.ClickNumber, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.Tp, data.Position, data.Title, data.Content, data.Picture, data.Link, data.ExpiringDate, data.ShowNumber, data.ClickNumber, time.Now())
	}, publicBizAdIdKey)
	return err
}

func (m *defaultBizAdModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicBizAdIdKey := fmt.Sprintf("%s%v", cachePublicBizAdIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizAdIdKey)
	return err
}

func (m *defaultBizAdModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicBizAdIdPrefix, primary)
}

func (m *defaultBizAdModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizAdRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBizAdModel) tableName() string {
	return m.table
}
