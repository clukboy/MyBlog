// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bizArticleLookFieldNames          = builder.RawFieldNames(&BizArticleLook{}, true)
	bizArticleLookRows                = strings.Join(bizArticleLookFieldNames, ",")
	bizArticleLookRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(bizArticleLookFieldNames, "id", "create_time"))

	cachePublicBizArticleLookIdPrefix = "cache:public:bizArticleLook:id:"
)

type (
	bizArticleLookModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *BizArticleLook) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BizArticleLook, error)
		Update(ctx context.Context, session sqlx.Session, data *BizArticleLook) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultBizArticleLookModel struct {
		sqlc.CachedConn
		table string
	}

	BizArticleLook struct {
		Id         int64     `db:"id"`
		ArticleId  int64     `db:"article_id"`  // 文章ID
		UserId     int64     `db:"user_id"`     // 已登录用户ID
		UserIp     string    `db:"user_ip"`     // 用户IP
		LookTime   time.Time `db:"look_time"`   // 浏览时间
		CreateTime time.Time `db:"create_time"` // 添加时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newBizArticleLookModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBizArticleLookModel {
	return &defaultBizArticleLookModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."biz_article_look"`,
	}
}

func (m *defaultBizArticleLookModel) Insert(ctx context.Context, session sqlx.Session, data *BizArticleLook) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(bizArticleLookRows).Values(data.Id, data.ArticleId, data.UserId, data.UserIp, data.LookTime, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicBizArticleLookIdKey := fmt.Sprintf("%s%v", cachePublicBizArticleLookIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizArticleLookIdKey)
	return ret, err
}

func (m *defaultBizArticleLookModel) FindOne(ctx context.Context, id int64) (*BizArticleLook, error) {
	publicBizArticleLookIdKey := fmt.Sprintf("%s%v", cachePublicBizArticleLookIdPrefix, id)
	var resp BizArticleLook
	err := m.QueryRowCtx(ctx, &resp, publicBizArticleLookIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizArticleLookRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBizArticleLookModel) Update(ctx context.Context, session sqlx.Session, data *BizArticleLook) error {
	publicBizArticleLookIdKey := fmt.Sprintf("%s%v", cachePublicBizArticleLookIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, bizArticleLookRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.ArticleId, data.UserId, data.UserIp, data.LookTime, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.ArticleId, data.UserId, data.UserIp, data.LookTime, time.Now())
	}, publicBizArticleLookIdKey)
	return err
}

func (m *defaultBizArticleLookModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicBizArticleLookIdKey := fmt.Sprintf("%s%v", cachePublicBizArticleLookIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizArticleLookIdKey)
	return err
}

func (m *defaultBizArticleLookModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicBizArticleLookIdPrefix, primary)
}

func (m *defaultBizArticleLookModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizArticleLookRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBizArticleLookModel) tableName() string {
	return m.table
}
