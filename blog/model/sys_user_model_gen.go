// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysUserFieldNames          = builder.RawFieldNames(&SysUser{}, true)
	sysUserRows                = strings.Join(sysUserFieldNames, ",")
	sysUserRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(sysUserFieldNames, "id", "create_time"))

	cachePublicSysUserIdPrefix = "cache:public:sysUser:id:"
)

type (
	sysUserModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *SysUser) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysUser, error)
		Update(ctx context.Context, session sqlx.Session, data *SysUser) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultSysUserModel struct {
		sqlc.CachedConn
		table string
	}

	SysUser struct {
		Id            int64     `db:"id"`
		Username      string    `db:"username"`
		Password      string    `db:"password"`        // 登录密码
		Nickname      string    `db:"nickname"`        // 昵称
		Mobile        string    `db:"mobile"`          // 手机号
		Email         string    `db:"email"`           // 邮箱地址
		Qq            string    `db:"qq"`              // QQ
		Birthday      time.Time `db:"birthday"`        // 生日
		Gender        int64     `db:"gender"`          // 性别
		Avatar        string    `db:"avatar"`          // 头像地址
		UserType      string    `db:"user_type"`       // 超级管理员、管理员、普通用户
		Company       string    `db:"company"`         // 公司
		Blog          string    `db:"blog"`            // 个人博客地址
		Location      string    `db:"location"`        // 地址
		Source        string    `db:"source"`          // 用户来源
		Uuid          string    `db:"uuid"`            // 用户唯一表示(第三方网站)
		Privacy       int64     `db:"privacy"`         // 隐私（1：公开，0：不公开）
		Notification  int64     `db:"notification"`    // 通知：(1：通知显示消息详情，2：通知不显示详情)
		Score         int64     `db:"score"`           // 金币值
		Experience    int64     `db:"experience"`      // 经验值
		RegIp         string    `db:"reg_ip"`          // 注册IP
		LastLoginIp   string    `db:"last_login_ip"`   // 最近登录IP
		LastLoginTime time.Time `db:"last_login_time"` // 最近登录时间
		LoginCount    int64     `db:"login_count"`     // 登录次数
		Remark        string    `db:"remark"`          // 用户备注
		Status        int64     `db:"status"`          // 用户状态
		CreateTime    time.Time `db:"create_time"`     // 注册时间
		UpdateTime    time.Time `db:"update_time"`     // 更新时间
	}
)

func newSysUserModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysUserModel {
	return &defaultSysUserModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."sys_user"`,
	}
}

func (m *defaultSysUserModel) Insert(ctx context.Context, session sqlx.Session, data *SysUser) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(sysUserRows).Values(data.Id, data.Username, data.Password, data.Nickname, data.Mobile, data.Email, data.Qq, data.Birthday, data.Gender, data.Avatar, data.UserType, data.Company, data.Blog, data.Location, data.Source, data.Uuid, data.Privacy, data.Notification, data.Score, data.Experience, data.RegIp, data.LastLoginIp, data.LastLoginTime, data.LoginCount, data.Remark, data.Status, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicSysUserIdKey := fmt.Sprintf("%s%v", cachePublicSysUserIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicSysUserIdKey)
	return ret, err
}

func (m *defaultSysUserModel) FindOne(ctx context.Context, id int64) (*SysUser, error) {
	publicSysUserIdKey := fmt.Sprintf("%s%v", cachePublicSysUserIdPrefix, id)
	var resp SysUser
	err := m.QueryRowCtx(ctx, &resp, publicSysUserIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", sysUserRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysUserModel) Update(ctx context.Context, session sqlx.Session, data *SysUser) error {
	publicSysUserIdKey := fmt.Sprintf("%s%v", cachePublicSysUserIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, sysUserRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Username, data.Password, data.Nickname, data.Mobile, data.Email, data.Qq, data.Birthday, data.Gender, data.Avatar, data.UserType, data.Company, data.Blog, data.Location, data.Source, data.Uuid, data.Privacy, data.Notification, data.Score, data.Experience, data.RegIp, data.LastLoginIp, data.LastLoginTime, data.LoginCount, data.Remark, data.Status, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.Username, data.Password, data.Nickname, data.Mobile, data.Email, data.Qq, data.Birthday, data.Gender, data.Avatar, data.UserType, data.Company, data.Blog, data.Location, data.Source, data.Uuid, data.Privacy, data.Notification, data.Score, data.Experience, data.RegIp, data.LastLoginIp, data.LastLoginTime, data.LoginCount, data.Remark, data.Status, time.Now())
	}, publicSysUserIdKey)
	return err
}

func (m *defaultSysUserModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicSysUserIdKey := fmt.Sprintf("%s%v", cachePublicSysUserIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicSysUserIdKey)
	return err
}

func (m *defaultSysUserModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicSysUserIdPrefix, primary)
}

func (m *defaultSysUserModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", sysUserRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysUserModel) tableName() string {
	return m.table
}
