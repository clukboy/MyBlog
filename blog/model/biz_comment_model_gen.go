// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bizCommentFieldNames          = builder.RawFieldNames(&BizComment{}, true)
	bizCommentRows                = strings.Join(bizCommentFieldNames, ",")
	bizCommentRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(bizCommentFieldNames, "id", "create_time"))

	cachePublicBizCommentIdPrefix = "cache:public:bizComment:id:"
)

type (
	bizCommentModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *BizComment) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BizComment, error)
		Update(ctx context.Context, session sqlx.Session, data *BizComment) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultBizCommentModel struct {
		sqlc.CachedConn
		table string
	}

	BizComment struct {
		Id               int64     `db:"id"`
		Sid              int64     `db:"sid"`                // 被评论的文章或者页面的ID
		UserId           int64     `db:"user_id"`            // 评论人的ID
		Pid              int64     `db:"pid"`                // 父级评论的id
		Qq               string    `db:"qq"`                 // 评论人的QQ（未登录用户）
		Nickname         string    `db:"nickname"`           // 评论人的昵称（未登录用户）
		Avatar           string    `db:"avatar"`             // 评论人的头像地址
		Email            string    `db:"email"`              // 评论人的邮箱地址（未登录用户）
		Url              string    `db:"url"`                // 评论人的网站地址（未登录用户）
		Status           string    `db:"status"`             // 评论的状态
		Ip               string    `db:"ip"`                 // 评论时的ip
		Lng              string    `db:"lng"`                // 经度
		Lat              string    `db:"lat"`                // 纬度
		Address          string    `db:"address"`            // 评论时的地址
		Os               string    `db:"os"`                 // 评论时的系统类型
		OsShortName      string    `db:"os_short_name"`      // 评论时的系统的简称
		Browser          string    `db:"browser"`            // 评论时的浏览器类型
		BrowserShortName string    `db:"browser_short_name"` // 评论时的浏览器的简称
		Content          string    `db:"content"`            // 评论的内容
		Remark           string    `db:"remark"`             // 备注（审核不通过时添加）
		Support          int64     `db:"support"`            // 支持（赞）
		Oppose           int64     `db:"oppose"`             // 反对（踩）
		CreateTime       time.Time `db:"create_time"`        // 添加时间
		UpdateTime       time.Time `db:"update_time"`        // 更新时间
	}
)

func newBizCommentModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBizCommentModel {
	return &defaultBizCommentModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."biz_comment"`,
	}
}

func (m *defaultBizCommentModel) Insert(ctx context.Context, session sqlx.Session, data *BizComment) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(bizCommentRows).Values(data.Id, data.Sid, data.UserId, data.Pid, data.Qq, data.Nickname, data.Avatar, data.Email, data.Url, data.Status, data.Ip, data.Lng, data.Lat, data.Address, data.Os, data.OsShortName, data.Browser, data.BrowserShortName, data.Content, data.Remark, data.Support, data.Oppose, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicBizCommentIdKey := fmt.Sprintf("%s%v", cachePublicBizCommentIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizCommentIdKey)
	return ret, err
}

func (m *defaultBizCommentModel) FindOne(ctx context.Context, id int64) (*BizComment, error) {
	publicBizCommentIdKey := fmt.Sprintf("%s%v", cachePublicBizCommentIdPrefix, id)
	var resp BizComment
	err := m.QueryRowCtx(ctx, &resp, publicBizCommentIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizCommentRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBizCommentModel) Update(ctx context.Context, session sqlx.Session, data *BizComment) error {
	publicBizCommentIdKey := fmt.Sprintf("%s%v", cachePublicBizCommentIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, bizCommentRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Sid, data.UserId, data.Pid, data.Qq, data.Nickname, data.Avatar, data.Email, data.Url, data.Status, data.Ip, data.Lng, data.Lat, data.Address, data.Os, data.OsShortName, data.Browser, data.BrowserShortName, data.Content, data.Remark, data.Support, data.Oppose, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.Sid, data.UserId, data.Pid, data.Qq, data.Nickname, data.Avatar, data.Email, data.Url, data.Status, data.Ip, data.Lng, data.Lat, data.Address, data.Os, data.OsShortName, data.Browser, data.BrowserShortName, data.Content, data.Remark, data.Support, data.Oppose, time.Now())
	}, publicBizCommentIdKey)
	return err
}

func (m *defaultBizCommentModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicBizCommentIdKey := fmt.Sprintf("%s%v", cachePublicBizCommentIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizCommentIdKey)
	return err
}

func (m *defaultBizCommentModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicBizCommentIdPrefix, primary)
}

func (m *defaultBizCommentModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizCommentRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBizCommentModel) tableName() string {
	return m.table
}
