// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	sysLogFieldNames          = builder.RawFieldNames(&SysLog{}, true)
	sysLogRows                = strings.Join(sysLogFieldNames, ",")
	sysLogRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(sysLogFieldNames, "id", "create_time"))

	cachePublicSysLogIdPrefix = "cache:public:sysLog:id:"
)

type (
	sysLogModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *SysLog) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*SysLog, error)
		Update(ctx context.Context, session sqlx.Session, data *SysLog) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultSysLogModel struct {
		sqlc.CachedConn
		table string
	}

	SysLog struct {
		Id         int64     `db:"id"`
		UserId     int64     `db:"user_id"`     // 已登录用户ID
		Tp         string    `db:"tp"`          // 日志类型（系统操作日志，用户访问日志，异常记录日志）
		LogLevel   string    `db:"log_level"`   // 日志级别
		Content    string    `db:"content"`     // 日志内容（业务操作）
		Params     string    `db:"params"`      // 请求参数（业务操作）
		SpiderType string    `db:"spider_type"` // 爬虫类型（当访问者被鉴定为爬虫时该字段表示爬虫的类型）
		Ip         string    `db:"ip"`          // 操作用户的ip
		Ua         string    `db:"ua"`          // 操作用户的user_agent
		Os         string    `db:"os"`          // 评论时的系统类型
		Browser    string    `db:"browser"`     // 评论时的浏览器类型
		RequestUrl string    `db:"request_url"` // 请求的路径
		Referer    string    `db:"referer"`     // 请求来源地址
		CreateTime time.Time `db:"create_time"` // 添加时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newSysLogModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultSysLogModel {
	return &defaultSysLogModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."sys_log"`,
	}
}

func (m *defaultSysLogModel) Insert(ctx context.Context, session sqlx.Session, data *SysLog) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(sysLogRows).Values(data.Id, data.UserId, data.Tp, data.LogLevel, data.Content, data.Params, data.SpiderType, data.Ip, data.Ua, data.Os, data.Browser, data.RequestUrl, data.Referer, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicSysLogIdKey := fmt.Sprintf("%s%v", cachePublicSysLogIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicSysLogIdKey)
	return ret, err
}

func (m *defaultSysLogModel) FindOne(ctx context.Context, id int64) (*SysLog, error) {
	publicSysLogIdKey := fmt.Sprintf("%s%v", cachePublicSysLogIdPrefix, id)
	var resp SysLog
	err := m.QueryRowCtx(ctx, &resp, publicSysLogIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", sysLogRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultSysLogModel) Update(ctx context.Context, session sqlx.Session, data *SysLog) error {
	publicSysLogIdKey := fmt.Sprintf("%s%v", cachePublicSysLogIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, sysLogRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.UserId, data.Tp, data.LogLevel, data.Content, data.Params, data.SpiderType, data.Ip, data.Ua, data.Os, data.Browser, data.RequestUrl, data.Referer, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.Tp, data.LogLevel, data.Content, data.Params, data.SpiderType, data.Ip, data.Ua, data.Os, data.Browser, data.RequestUrl, data.Referer, time.Now())
	}, publicSysLogIdKey)
	return err
}

func (m *defaultSysLogModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicSysLogIdKey := fmt.Sprintf("%s%v", cachePublicSysLogIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicSysLogIdKey)
	return err
}

func (m *defaultSysLogModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicSysLogIdPrefix, primary)
}

func (m *defaultSysLogModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", sysLogRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultSysLogModel) tableName() string {
	return m.table
}
