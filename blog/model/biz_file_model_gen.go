// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bizFileFieldNames          = builder.RawFieldNames(&BizFile{}, true)
	bizFileRows                = strings.Join(bizFileFieldNames, ",")
	bizFileRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(bizFileFieldNames, "id", "create_time"))

	cachePublicBizFileIdPrefix = "cache:public:bizFile:id:"
)

type (
	bizFileModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *BizFile) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BizFile, error)
		Update(ctx context.Context, session sqlx.Session, data *BizFile) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultBizFileModel struct {
		sqlc.CachedConn
		table string
	}

	BizFile struct {
		Id               int64     `db:"id"`
		UserId           int64     `db:"user_id"`
		StorageType      string    `db:"storage_type"`
		OriginalFileName string    `db:"original_file_name"`
		Size             int64     `db:"size"`
		Suffix           string    `db:"suffix"`
		Width            int64     `db:"width"`
		Height           int64     `db:"height"`
		FilePath         string    `db:"file_path"`
		FullFilePath     string    `db:"full_file_path"`
		FileHash         string    `db:"file_hash"`
		UploadType       string    `db:"upload_type"`
		UploadStartTime  time.Time `db:"upload_start_time"`
		UploadEndTime    time.Time `db:"upload_end_time"`
		CreateTime       time.Time `db:"create_time"`
		UpdateTime       time.Time `db:"update_time"`
	}
)

func newBizFileModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBizFileModel {
	return &defaultBizFileModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."biz_file"`,
	}
}

func (m *defaultBizFileModel) Insert(ctx context.Context, session sqlx.Session, data *BizFile) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(bizFileRows).Values(data.Id, data.UserId, data.StorageType, data.OriginalFileName, data.Size, data.Suffix, data.Width, data.Height, data.FilePath, data.FullFilePath, data.FileHash, data.UploadType, data.UploadStartTime, data.UploadEndTime, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicBizFileIdKey := fmt.Sprintf("%s%v", cachePublicBizFileIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizFileIdKey)
	return ret, err
}

func (m *defaultBizFileModel) FindOne(ctx context.Context, id int64) (*BizFile, error) {
	publicBizFileIdKey := fmt.Sprintf("%s%v", cachePublicBizFileIdPrefix, id)
	var resp BizFile
	err := m.QueryRowCtx(ctx, &resp, publicBizFileIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizFileRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBizFileModel) Update(ctx context.Context, session sqlx.Session, data *BizFile) error {
	publicBizFileIdKey := fmt.Sprintf("%s%v", cachePublicBizFileIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, bizFileRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.UserId, data.StorageType, data.OriginalFileName, data.Size, data.Suffix, data.Width, data.Height, data.FilePath, data.FullFilePath, data.FileHash, data.UploadType, data.UploadStartTime, data.UploadEndTime, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.UserId, data.StorageType, data.OriginalFileName, data.Size, data.Suffix, data.Width, data.Height, data.FilePath, data.FullFilePath, data.FileHash, data.UploadType, data.UploadStartTime, data.UploadEndTime, time.Now())
	}, publicBizFileIdKey)
	return err
}

func (m *defaultBizFileModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicBizFileIdKey := fmt.Sprintf("%s%v", cachePublicBizFileIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizFileIdKey)
	return err
}

func (m *defaultBizFileModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicBizFileIdPrefix, primary)
}

func (m *defaultBizFileModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizFileRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBizFileModel) tableName() string {
	return m.table
}
