// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	sq "github.com/Masterminds/squirrel"
	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	bizPageFieldNames          = builder.RawFieldNames(&BizPage{}, true)
	bizPageRows                = strings.Join(bizPageFieldNames, ",")
	bizPageRowsWithPlaceHolder = builder.PostgreSqlJoin(stringx.Remove(bizPageFieldNames, "id", "create_time"))

	cachePublicBizPageIdPrefix = "cache:public:bizPage:id:"
)

type (
	bizPageModel interface {
		Insert(ctx context.Context, session sqlx.Session, data *BizPage) (sql.Result, error)
		FindOne(ctx context.Context, id int64) (*BizPage, error)
		Update(ctx context.Context, session sqlx.Session, data *BizPage) error
		Delete(ctx context.Context, session sqlx.Session, id int64) error
	}

	defaultBizPageModel struct {
		sqlc.CachedConn
		table string
	}

	BizPage struct {
		Id         int64     `db:"id"`
		Url        string    `db:"url"`         // 自定义页面的url（不包含域名部分）
		Content    string    `db:"content"`     // 自定义页面的内容
		CreateTime time.Time `db:"create_time"` // 添加时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newBizPageModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultBizPageModel {
	return &defaultBizPageModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      `"public"."biz_page"`,
	}
}

func (m *defaultBizPageModel) Insert(ctx context.Context, session sqlx.Session, data *BizPage) (sql.Result, error) {
	query, args, err := sq.Insert(m.table).Columns(bizPageRows).Values(data.Id, data.Url, data.Content, data.CreateTime, data.UpdateTime).
		PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return nil, err
	}
	publicBizPageIdKey := fmt.Sprintf("%s%v", cachePublicBizPageIdPrefix, data.Id)

	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizPageIdKey)
	return ret, err
}

func (m *defaultBizPageModel) FindOne(ctx context.Context, id int64) (*BizPage, error) {
	publicBizPageIdKey := fmt.Sprintf("%s%v", cachePublicBizPageIdPrefix, id)
	var resp BizPage
	err := m.QueryRowCtx(ctx, &resp, publicBizPageIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizPageRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultBizPageModel) Update(ctx context.Context, session sqlx.Session, data *BizPage) error {
	publicBizPageIdKey := fmt.Sprintf("%s%v", cachePublicBizPageIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where id = $1", m.table, bizPageRowsWithPlaceHolder)
		if session != nil {
			return session.ExecCtx(ctx, query, data.Id, data.Url, data.Content, time.Now())

		}
		return conn.ExecCtx(ctx, query, data.Id, data.Url, data.Content, time.Now())
	}, publicBizPageIdKey)
	return err
}

func (m *defaultBizPageModel) Delete(ctx context.Context, session sqlx.Session, id int64) error {
	query, args, err := sq.Delete(m.table).Where(sq.Eq{"id": id}).PlaceholderFormat(sq.Dollar).ToSql()
	if err != nil {
		return err
	}
	publicBizPageIdKey := fmt.Sprintf("%s%v", cachePublicBizPageIdPrefix, id)
	_, err = m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		if session != nil {
			return session.ExecCtx(ctx, query, args...)
		}
		return conn.ExecCtx(ctx, query, args...)
	}, publicBizPageIdKey)
	return err
}

func (m *defaultBizPageModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cachePublicBizPageIdPrefix, primary)
}

func (m *defaultBizPageModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where id = $1 limit 1", bizPageRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultBizPageModel) tableName() string {
	return m.table
}
